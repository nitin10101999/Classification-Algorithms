# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GhRqKndDxmYTFxHO3-I-bLVJsqB-xoNC
"""

#import os
#os.chdir('/content/drive/My Drive/Code/Ass3/Data')

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from scipy.stats import multivariate_normal
import copy 
import math
import csv
import time
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style="darkgrid")

# Default value
SSE = 0 
phi = -1
pi = 3.141593
dim = 1

def split_data(x,y):
    X_train, X_test, y_train, y_test = train_test_split(
        x, y,stratify = y, test_size=0.2)

    return  X_train, X_test, y_train, y_test

def euclidDistance(x1,x2):
  dist = 0
  for i in range(len(x1)):
    dist += (x1[i]-x2[i])**2
  return math.sqrt(dist)

def findKNeighours(testRow,train,K):
  distances = []
  for ind in range(len(train)):
    dist = euclidDistance(train[ind],testRow)
    distances.append((dist,ind))
  distances.sort(key= lambda x: x[0])
  K_neighbours = []
  for i in range(K):
    K_neighbours.append(distances[i][1])
  return K_neighbours

def predict(testRow,X_train,y_train,K,labels):
  K_neighbours = findKNeighours(testRow,X_train,K)
  lab = [0]*labels
  mxClass = -1
  max = 0
  for ind in K_neighbours:
    lab[y_train[ind]] +=1
    if lab[y_train[ind]] > max:
      max = lab[y_train[ind]]
      mxClass = y_train[ind]
  
  return mxClass

def KNN(X_train,X_test, y_train,K,labels):
  Y_out = []
  for row in X_test:
    Y_out.append(predict(row,X_train,y_train,K,labels))

  return Y_out

def fetchData(filename):
  df = pd.read_csv(filename)
  cols = np.array(df.columns)
  features = cols[:len(df.columns)-1]
  category = cols[len(df.columns)-1:]
  x = df.loc[:,features].values
  y = df.loc[:,category].values
  Y = []
  for i in range(len(y)):
    Y.append(y[i][0])
  return x , Y, df

x, y, df = fetchData('Data/creditcard.csv')
dim = len(df.columns) - 1

X_train, X_test, y_train, y_test = split_data(x,y)

K = 20
labels = 2
Y_out = KNN(X_train,X_test[:10], y_train,K,labels)

print(accuracy_score(Y_out,y_test[:10]))

